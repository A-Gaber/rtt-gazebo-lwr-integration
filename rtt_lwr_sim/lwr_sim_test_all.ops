
loadComponent("gazebo","CORBA")

import("rtt_ros")

ros.import("rtt_rospack")
ros.import("rtt_rosnode")
ros.import("rtt_roscomm")
ros.import("rtt_rosparam")

import("rtt_sensor_msgs")
import("rtt_geometry_msgs")
import("rtt_diagnostic_msgs")
import("kdl_typekit")
import("eigen_typekit")
import("rtt_rosclock")
import("rtt_tf")
import("rtt_dynamic_reconfigure")

ros.import("rtt_actionlib")

import("rtt_std_srvs")
import("rtt_actionlib_msgs")
import("rtt_control_msgs")
import("rtt_controller_manager_msgs")
import("conman")

ros.import("conman_ros")
import("conman_blocks")


import("rtt_lwr_sim")



loadComponent("tf","rtt_tf::RTT_TF")
tf.configure()
tf.start()

loadComponent("scheme","conman::Scheme")
scheme.setPeriod(0.001)
scheme.addGroup("devices")
scheme.loadService("sim_clock_activity")
scheme.loadService("conman_ros")
scheme.configure()

loadComponent("lwr","lwr::LWRSim")

loadService("lwr","rosparam")

lwr.rosparam.getAll()
lwr.rosparam.getAbsolute("robot_description")



setActivity("lwr",0.001,LowestPriority,ORO_SCHED_OTHER)

connectPeers("gazebo","lwr")

lwr.configure()
############lwr.start()


ros.import("lcsr_controllers")

loadComponent("pid","lcsr_controllers::JointPIDController")
connectPeers("lwr","pid")

#loadComponent("effort_sum","conman_blocks::FeedForwardFeedBack")
#connect("effort_sum.sum_out","lwr.JointTorqueCommand",ConnPolicy())
#effort_sum.configure()

connect("lwr.JointPosition", "pid.joint_position_in",ConnPolicy())
connect("lwr.JointVelocity", "pid.joint_velocity_in",ConnPolicy())
connect("lwr.JointTorqueCommand", "pid.joint_effort_out",ConnPolicy())

pid.root_link="lwr/base_link"
pid.tip_link="lwr/lwr_7_link"

pid.configure()

connectPeers("scheme","lwr")
connectPeers("scheme","pid")

######runScript(ros.find("lwr_state_publisher")+"/rtt_lwr_state_publisher.ops");

